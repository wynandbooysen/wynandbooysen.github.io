<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Wynand Booysen</title><link href="/" rel="alternate"></link><link href="/feeds/all.atom.xml" rel="self"></link><id>/</id><updated>2017-01-17T17:59:00+02:00</updated><entry><title>Setting Up Ubiquiti AP at Home with Dockerized Controller</title><link href="/setting-up-ubiquiti-ap-at-home-with-dockerized-controller.html" rel="alternate"></link><published>2017-01-17T17:59:00+02:00</published><updated>2017-01-17T17:59:00+02:00</updated><author><name>Wynand Booysen</name></author><id>tag:None,2017-01-17:/setting-up-ubiquiti-ap-at-home-with-dockerized-controller.html</id><summary type="html">&lt;p&gt;Setting Up Ubiquiti AP at Home with Dockerized Controller&lt;/p&gt;</summary><content type="html">&lt;p&gt;I got to the point where the all-in-one solutions provided by consumer grade router/modem/firewall/Wifi devices were just not cutting it anymore.&lt;/p&gt;
&lt;p&gt;My HTPC is wired for Internet access, which seems to stay connected without any issue.  However my phones/tablets/laptops would randomly drop of the Wifi and not be able to reconnect to it or shows it's connected to Wifi but has no Internet access.&lt;/p&gt;
&lt;p&gt;The only way to resolve the Wifi issue is to restart the DLink 'router'&lt;/p&gt;
&lt;p&gt;So I made up my mind to separate these functions, at least the router/firewall from the Wifi.&lt;/p&gt;
&lt;p&gt;Currently I'm borrowing a spare Ubiquiti to test with before committing to buying a unit for myself.&lt;/p&gt;
&lt;p&gt;Ubiquiti provides software based Unifi Controller that is used to configure and manage the AccessPoints (APs).  Instead of spinning up a VM or installing it directly on one of my machines I just opted to run the docker container published by LinuxServer.io on docker hub (linuxserver/unifi)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;docker run -d -h unifi --name&lt;span class="o"&gt;=&lt;/span&gt;unifi   -v /path/to/storage/for/configs/unifi:/config   -e &lt;span class="nv"&gt;PGID&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&amp;lt;gid&amp;gt; -e &lt;span class="nv"&gt;PUID&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&amp;lt;uid&amp;gt;    -p 8080:8080   -p 8081:8081   -p 8443:8443   -p 8843:8843   -p 8880:8880   linuxserver/unifi
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Update the path to the directory to be used for the volume where the config file will be persisted on the docker host, and provide the GID and UID of the user that is the owner of the path specified&lt;/p&gt;
&lt;p&gt;This will boot up and become accessible after a few seconds on https://ip:8443&lt;/p&gt;
&lt;p&gt;This doesn't run the latest version but is recent enough for my purposes as this is only a temp solution.&lt;/p&gt;
&lt;p&gt;First issue since I'm borrowing a unit, it has been configured before and has been sitting in a cupboard for a while.  So first step is to reset it back to factory settings by using the reset switch on the unit and a trusty paper clip - hold during boot until it flashes orange.&lt;/p&gt;
&lt;p&gt;Second issue due to the age, the firmware might be too old to communicate with version 5 of the Unifi Controller software - I will cover upgrading the AP via SSH using the Controllers bundled firmware.&lt;/p&gt;
&lt;p&gt;Once reset and booted up again, check your DHCP server for the lease or scan the network for the AP.  I've tried using the Ubiquiti Device Discovery Tool (Chrome Extension) but had no success in finding the device on the network.  So I got my IP from my DHCP server.&lt;/p&gt;
&lt;p&gt;Armed with the IP of the AP, we SSH into the AP.  Default user name and password are both ubnt&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;ssh ubnt@YOUR.AP.IP.ADDRESS
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Once logged in the console will display the model and version number.  From here we will issue the upgrade command as follow:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;upgrade http://YOUR.CONTROLLER.IP.ADDRESS:8080/dl/firmware/BZ2/3.7.28.5442/firmware.
bin
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Replace BZ2 with your model as required and the firmware version, which in my case is 3.7.28.5442 with the appropriate version found under:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;/usr/lib/unifi/dl/firmware/MODEL/
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;inside the docker image, which can be accessed while it is running by executing:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;docker &lt;span class="nb"&gt;exec&lt;/span&gt; -it unifi /bin/bash
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;and navigating to the bundled firmware directory as listed above.&lt;/p&gt;
&lt;p&gt;After updating however it was still failing to detect the AP from the controller, because the AP tries to register by looking for http://unifi:8080/inform on the local network.  So you can either set an ALIAS for the Unifi Controller in DNS, pass option 43 in your DHCP scope or manually update the address on the AP while logged in via SSH by issuing:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;mca-cli
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;to enter CLI, then:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;set-inform http://ip-of-controller:8080/inform
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;after which it should appear in the Unifi Controller with the option to adopt it, and then issue the set-inform command again to complete the handshake after which the status will be provisioning followed by connected.&lt;/p&gt;
&lt;p&gt;In a later post I'll review setting up the actual AP from the Unifi Controller, assigning an SSID as well as other options offered.&lt;/p&gt;</content><category term="ubiquiti"></category><category term="docker"></category><category term="access point"></category></entry><entry><title>Using Ansible To Manage Mikrotik Devices</title><link href="/using-ansible-to-manage-mikrotik-devices.html" rel="alternate"></link><published>2017-01-07T10:57:00+02:00</published><updated>2017-01-07T10:57:00+02:00</updated><author><name>Wynand Booysen</name></author><id>tag:None,2017-01-07:/using-ansible-to-manage-mikrotik-devices.html</id><summary type="html">&lt;p&gt;Using Ansible To Manage Mikrotik Devices&lt;/p&gt;</summary><content type="html">&lt;p&gt;Mikrotik devices are very capable devices with lots of features for a reasonable price - the problem? Managing several devices and keeping your base configurations up-to-date and consistent.&lt;/p&gt;
&lt;p&gt;Mikrotik devices have an application programming interface (API) that can be used for management, but you'll need to roll your own solution.  But they can also be accessed and managed via SSH.&lt;/p&gt;
&lt;p&gt;Mikrotik does also provide software named The Dude which does network monitoring as well as some remote management, but in order to establish and maintain an consistent base line one really needs a configuration management tool.&lt;/p&gt;
&lt;p&gt;So in order to use a configuration tool for Mikrotik devices, it has to be agentless and able to manage them over SSH - and easy to use.&lt;/p&gt;
&lt;p&gt;So I picked Ansible since it met the criteria the best.  You need a server that can SSH into your Mikrotik devices which serves as the control server, and Ansible Playbooks which contain the tasks to be performed against the managed nodes and a list of hosts that need to be managed.  The Playbooks are written in YAML.  It works, but it's not perfect and here is why.&lt;/p&gt;
&lt;p&gt;Mikrotik's RouterOS is based on the Linux kernel, but it is a minimal purpose built OS.  It doesn't have Python installed - which is what Ansible uses to manage the nodes.  It does check for Python on the node after connecting by default, but you have the option to override this in your Playbook and execute RAW commands directly against the node&lt;/p&gt;
&lt;p&gt;It doesn't properly support pseudo terminals (PTY) which means the connection stays open/active and Ansible will appear to be hanging.&lt;/p&gt;
&lt;p&gt;In previous versions of Ansible a PTY was only used when the command needed to be executed as root. An if statement prevented the code from always using it. Since Ansible v2+ a PTY is always used unless specifically disabled in the ansible.cfg by uncommenting a line.  This however is only disables it for Paramiko connections, which is a little bit slower, but not OpenSSH connections.  Paramiko also throws 'No handlers could be found for logger 'paramiko.transport'' when it encounters an error due to logging not being configured, but you can just use -vvvv when executing the Playbook to debug the errors.&lt;/p&gt;
&lt;p&gt;These few quirks aside, Ansible does make it easier to manage Mikrotik devices.&lt;/p&gt;</content><category term="script"></category><category term="router"></category><category term="firewall"></category><category term="ansible"></category></entry><entry><title>FitBit Presence Detection</title><link href="/fitbit-presence-detection.html" rel="alternate"></link><published>2016-10-08T18:00:00+02:00</published><updated>2016-10-08T18:00:00+02:00</updated><author><name>Wynand Booysen</name></author><id>tag:None,2016-10-08:/fitbit-presence-detection.html</id><summary type="html">&lt;p&gt;FitBit Presence Detection&lt;/p&gt;</summary><content type="html">&lt;p&gt;Show with the launch of the FitBit Alta and the new FitBit Flex 2 the prices of the FitBit Flex was bound to go down.  So I picked up a FitBit Flex for just R800.  So why did I get one?&lt;/p&gt;
&lt;p&gt;Well I try and keep fit and tracking your activity helps you stay motivated.  But mainly I wanted to check the sleep monitoring function and have another Bluetooth device to be possibly used for presence detection.&lt;/p&gt;
&lt;p&gt;So the FitBit Flex uses a Nordic Semiconductor nRF8001 chip - which is for Bluetooth 4.0 LE connectivity.&lt;/p&gt;
&lt;p&gt;It also comes with a USB dongle that uses Texas Instruments CC2540F128 Bluetooth LE SoC to sync the Flex's data via a computer instead of the phone app.&lt;/p&gt;
&lt;p&gt;So since the Flex is a Bluetooth device it should have unique hardware address (MAC)?&lt;/p&gt;
&lt;p&gt;Galileo is a Python utility by Benoit Allard that allows communication with the Bluetooth based FitBit devices and sync to FitBit website.&lt;/p&gt;
&lt;p&gt;Using Galileo you can scan for FitBit devices to sync their data.  It will list all devices along with their MAC addresses.&lt;/p&gt;
&lt;p&gt;Simple bash script and we can grep for the specific unit's MAC address and execute something when the device is present.&lt;/p&gt;</content><category term="fitbit"></category><category term="Bluetooth"></category></entry><entry><title>Mikrotik Inside VirtualBox</title><link href="/mikrotik-inside-virtualbox.html" rel="alternate"></link><published>2016-08-20T11:00:00+02:00</published><updated>2016-08-20T11:00:00+02:00</updated><author><name>Wynand Booysen</name></author><id>tag:None,2016-08-20:/mikrotik-inside-virtualbox.html</id><summary type="html">&lt;p&gt;Mikrotik Inside VirtualBox&lt;/p&gt;</summary><content type="html">&lt;p&gt;We'll have a look at setting up a virtual Mikrotik using VirtualBox.  This handy for testing scripts/configurations as well as testing backups from production devices - by restoring them onto the virtual Mikrotik.&lt;/p&gt;
&lt;p&gt;Head on over to &lt;a href="http://www.mikrotik.com/download"&gt;http://www.mikrotik.com/download&lt;/a&gt; and download the VDI image.&lt;/p&gt;
&lt;p&gt;After downloading the file simply copy and paste it into the same directory, which depending on the host OS will append the word copy to it in one fashion or another.  The reason for this is that we will use the 'copy' as the hard drive of the virtual Mikrotik allowing for a simple delete and replace with yet another copy whenever we need to do a hard 'reset' on the device.&lt;/p&gt;
&lt;p&gt;Then on VirtualBox, create a new virtual machine.  For the sake of simplicity I'll name mine Mikrotik.&lt;/p&gt;
&lt;p&gt;Select Type as Linux and for Version Other Linux (64bit) and click Continue.&lt;/p&gt;
&lt;p&gt;For RAM I drop it to 128MB which is still somewhat excessive and click Continue.&lt;/p&gt;
&lt;p&gt;Now select 'Do not add a virtual hard disk' - we will add the 'copy' of the downloaded VDI after creating the virtual machine.  Click on Create&lt;/p&gt;
&lt;p&gt;Ignore the prompt about the machine not having a hard drive.  Once created manually add the existing hard drive and change the network adapter to bridged mode so that it will receive an IP on your network and allow you to connect using WinBox/SSH/WebFig.&lt;/p&gt;
&lt;p&gt;It should take a few seconds for the virtual Mikrotik to boot, after which you can log into the Mikrotik using the default admin user with no password.&lt;/p&gt;
&lt;p&gt;Issue the command &lt;code&gt;/ip address print&lt;/code&gt; to get the IP of the virtual Mikrotik.&lt;/p&gt;
&lt;p&gt;Now you can log into the virtual Mikrotik just like any other Mikrotik device.&lt;/p&gt;</content><category term="router"></category><category term="firewall"></category></entry><entry><title>Mikrotik WinBox for MacOS</title><link href="/mikrotik-winbox-for-macos.html" rel="alternate"></link><published>2016-08-08T08:37:00+02:00</published><updated>2016-08-08T08:37:00+02:00</updated><author><name>Wynand Booysen</name></author><id>tag:None,2016-08-08:/mikrotik-winbox-for-macos.html</id><summary type="html">&lt;p&gt;Mikrotik WinBox for MacOS&lt;/p&gt;</summary><content type="html">&lt;p&gt;Mikrotik's WinBox is a native Windows application used to manage and configure Mikrotik devices.&lt;/p&gt;
&lt;p&gt;It is possible to run this under Wine on other operating systems.  Luckily for us Joshaven Potter builds a MacOS version with embedded Wine which you can download from his site &lt;a href="http://joshaven.com/resources/tools/winbox-for-mac/"&gt;http://joshaven.com/resources/tools/winbox-for-mac/&lt;/a&gt; and just drop into your applications directory and start using it immediately.&lt;/p&gt;
&lt;p&gt;He also provides a MacOS version of Mikrotik's The Dude as well.&lt;/p&gt;</content><category term="macos"></category><category term="winbox"></category><category term="firewall"></category><category term="router"></category></entry><entry><title>Mikrotik Configuration Snippets</title><link href="/mikrotik-configuration-snippets.html" rel="alternate"></link><published>2016-07-31T09:05:00+02:00</published><updated>2016-07-31T09:05:00+02:00</updated><author><name>Wynand Booysen</name></author><id>tag:None,2016-07-31:/mikrotik-configuration-snippets.html</id><summary type="html">&lt;p&gt;Mikrotik Configuration Snippets&lt;/p&gt;</summary><content type="html">&lt;p&gt;This post will contain snippets for various Mikrotik configuration options.&lt;/p&gt;
&lt;p&gt;Set ether1 to DHCP client&lt;/p&gt;
&lt;div class="gist"&gt;
    &lt;script src='https://gist.github.com/0eee4afa95897a70e5b63d3ee3f5515e.js'&gt;&lt;/script&gt;
    &lt;noscript&gt;
        &lt;pre&gt;&lt;code&gt;/ip dhcp-client add interface=ether1 disabled=no&lt;/code&gt;&lt;/pre&gt;
    &lt;/noscript&gt;
&lt;/div&gt;
&lt;p&gt;Override default SNMP community (Lockdown SNMP) &lt;/p&gt;
&lt;div class="gist"&gt;
    &lt;script src='https://gist.github.com/629f458dc7e93f826bee71a322317d53.js'&gt;&lt;/script&gt;
    &lt;noscript&gt;
        &lt;pre&gt;&lt;code&gt;/snmp community
set [ find default=yes ] addresses=x.x.x.x/32 name=COMMUNITYNAME&lt;/code&gt;&lt;/pre&gt;
    &lt;/noscript&gt;
&lt;/div&gt;</content><category term="script"></category><category term="router"></category><category term="firewall"></category></entry><entry><title>Moving to Pelican</title><link href="/moving-to-pelican.html" rel="alternate"></link><published>2016-07-21T17:05:00+02:00</published><updated>2016-07-21T17:05:00+02:00</updated><author><name>Wynand Booysen</name></author><id>tag:None,2016-07-21:/moving-to-pelican.html</id><summary type="html">&lt;p&gt;Moving to Pelican&lt;/p&gt;</summary><content type="html">&lt;p&gt;This is my first post after switching to Pelican.&lt;/p&gt;
&lt;p&gt;I decided that running a Virtual Private Server just to host WordPress was overkill, so I started looking at static site generators.&lt;/p&gt;
&lt;p&gt;Ultimately ended up going with Pelican - Python based, mature and feature rich enough for what I need.&lt;/p&gt;
&lt;p&gt;Now I only need to write more often :-)&lt;/p&gt;</content><category term="pelican"></category><category term="publishing"></category></entry><entry><title>Raspberry Pi - UPS server using NUT</title><link href="/raspberry-pi-ups-server-using-nut.html" rel="alternate"></link><published>2016-04-23T16:10:00+02:00</published><updated>2016-04-23T16:10:00+02:00</updated><author><name>Wynand Booysen</name></author><id>tag:None,2016-04-23:/raspberry-pi-ups-server-using-nut.html</id><summary type="html">&lt;p&gt;So today we will setup a NUT (Network UPS Tools) server on a Raspberry
Pi to turn our USB attached UPS into a networked UPS.&lt;/p&gt;
&lt;p&gt;I'm using a Raspberry Pi model B+ that was lying around, running the
minimal image - Raspbian Jessie Lite.&lt;/p&gt;
&lt;p&gt;So we start off by connecting to …&lt;/p&gt;</summary><content type="html">&lt;p&gt;So today we will setup a NUT (Network UPS Tools) server on a Raspberry
Pi to turn our USB attached UPS into a networked UPS.&lt;/p&gt;
&lt;p&gt;I'm using a Raspberry Pi model B+ that was lying around, running the
minimal image - Raspbian Jessie Lite.&lt;/p&gt;
&lt;p&gt;So we start off by connecting to the Raspberry Pi over SSH (default
credentials username:&lt;strong&gt;pi&lt;/strong&gt; and password:&lt;strong&gt;raspberry&lt;/strong&gt;) and setting an
static IP which will be used later when we configure the NUT-server and
our NUT-clients.&lt;/p&gt;
&lt;p&gt;This has changed since Jessie and now gets done in /etc/dhcpcd.conf
which we open for editing using:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo nano /etc/dhcpcd.conf
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;and at the bottom of the file we add &lt;em&gt;interface&lt;/em&gt; &lt;strong&gt;eth0&lt;/strong&gt; for the
onboard NIC and it's static values:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;interface eth0
static &lt;span class="nv"&gt;ip_address&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;x.x.x.x

static &lt;span class="nv"&gt;routers&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;y.y.y.y
static &lt;span class="nv"&gt;domain_name_servers&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;8.8.8.8 8.8.4.4
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;em&gt;static ip_address&lt;/em&gt; is the IP address to be used for the Raspberry Pi,
&lt;em&gt;static routers&lt;/em&gt; is the network's default Gateway IP and &lt;em&gt;static
domain_name_servers&lt;/em&gt; are the IP addresses of your DNS servers and save
(CTRL+X, then Y)&lt;/p&gt;
&lt;p&gt;Quick reboot (&lt;code&gt;sudo reboot&lt;/code&gt; ) and SSH back in on the new IP address, and now we can
begin configuring NUT.  Start by updating and upgrading the system
using:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo apt-get update &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; sudo apt-get upgrade
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Followed by installing the NUT-server and NUT-client:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo apt-get install nut-client nut-server
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Ensure that &lt;em&gt;usbutils&lt;/em&gt; is installed so we can use &lt;em&gt;lsusb&lt;/em&gt; to get some
info from the UPS:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo apt-get install usbutils
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;and connect the UPS via USB if not already connected.  Run &lt;em&gt;lsusb&lt;/em&gt; which
will return a list of the connected USB devices - usually device number
004 should be the UPS on a freshly installed Raspbian system, in my case
my Eaton UPS is being identified as a MGE UPS with vendor ID 0463:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pi@raspberrypi:~ $ lsusb
Bus &lt;span class="m"&gt;001&lt;/span&gt; Device 004: ID 0463:ffff MGE UPS Systems UPS
Bus &lt;span class="m"&gt;001&lt;/span&gt; Device 003: ID 0424:ec00 Standard Microsystems Corp. SMSC9512/9514 Fast Ethernet Adapter
Bus &lt;span class="m"&gt;001&lt;/span&gt; Device 002: ID 0424:9514 Standard Microsystems Corp. 
Bus &lt;span class="m"&gt;001&lt;/span&gt; Device 001: ID 1d6b:0002 Linux Foundation 2.0 root hub
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;So first file we edit will be &lt;em&gt;/etc/nut/ups.conf&lt;/em&gt; to configure our UPS
using Nano again:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo nano /etc/nut/ups.conf
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;and right at the bottom we add our UPS with a &lt;em&gt;[friendly_name],
driver, port&lt;/em&gt; and &lt;em&gt;desc:&lt;/em&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;eaton&lt;span class="o"&gt;]&lt;/span&gt;
        &lt;span class="nv"&gt;driver&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; usbhid-ups
        &lt;span class="nv"&gt;port&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; auto
        &lt;span class="nv"&gt;desc&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Eaton UPS&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;and save (CTRL+X, then Y) then we test the UPS driver by running:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo upsdrvctl start
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;which will return something similar depending on your UPS model and if
not a quick reboot usually does the trick to get the UPS to play along:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Network UPS Tools - UPS driver controller 2.7.2
Network UPS Tools - Generic HID driver 0.38 &lt;span class="o"&gt;(&lt;/span&gt;2.7.2&lt;span class="o"&gt;)&lt;/span&gt;
USB communication driver 0.32
Using subdriver: MGE HID 1.33
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Key lines here are the last two stating it's communicating via USB
driver and loading the sub-driver for the UPS model.&lt;/p&gt;
&lt;p&gt;The next step is to configure &lt;strong&gt;upsmon&lt;/strong&gt; and &lt;strong&gt;upsd&lt;/strong&gt; of which the later
communicates with the UPS driver configured while &lt;strong&gt;upsmon&lt;/strong&gt; monitors
and communicates shutdown procedures to &lt;strong&gt;upsd&lt;/strong&gt;.  NUT allows multiple
instances of &lt;strong&gt;upsmon&lt;/strong&gt; to run on different machines while communicating
with the same physical UPS.&lt;/p&gt;
&lt;p&gt;So for &lt;strong&gt;upsd&lt;/strong&gt; to be accessible via the network we edit &lt;code&gt;*/etc/nut/upsd.conf*&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;sudo nano /etc/nut/upsd.conf&lt;/code&gt; and uncomment the LISTEN directive for
the localhost IP (127.0.0.1) and add another LISTEN directive for the
static IP (x.x.x.x) that we set before starting the installation of NUT:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;#&lt;/span&gt;
LISTEN 127.0.0.1 3493
LISTEN x.x.x.x 3493

&lt;span class="c1"&gt;#&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;We will need to add some users to manage access to &lt;strong&gt;upsd&lt;/strong&gt; by editing
the &lt;strong&gt;upsd&lt;/strong&gt; users config file &lt;code&gt;sudo nano /etc/nut/upsd.users&lt;/code&gt; and adding the following:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;admin&lt;span class="o"&gt;]&lt;/span&gt;
        &lt;span class="nv"&gt;password&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; youradmpass
        &lt;span class="nv"&gt;actions&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; SET
        &lt;span class="nv"&gt;instcmds&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; ALL

&lt;span class="c1"&gt;#&lt;/span&gt;
&lt;span class="c1"&gt;# --- Configuring for a user who can execute tests only&lt;/span&gt;
&lt;span class="c1"&gt;#&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;testuser&lt;span class="o"&gt;]&lt;/span&gt;
        &lt;span class="nv"&gt;password&lt;/span&gt;  &lt;span class="o"&gt;=&lt;/span&gt; testuserpass  
        &lt;span class="nv"&gt;instcmds&lt;/span&gt;  &lt;span class="o"&gt;=&lt;/span&gt; test.battery.start
        &lt;span class="nv"&gt;instcmds&lt;/span&gt;  &lt;span class="o"&gt;=&lt;/span&gt; test.battery.stop

&lt;span class="c1"&gt;#&lt;/span&gt;
&lt;span class="c1"&gt;# --- Configuring for upsmon&lt;/span&gt;
&lt;span class="c1"&gt;#&lt;/span&gt;
&lt;span class="c1"&gt;# To add a user for your upsmon, use this example:&lt;/span&gt;
&lt;span class="c1"&gt;#&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;upsmon_local&lt;span class="o"&gt;]&lt;/span&gt;
        &lt;span class="nv"&gt;password&lt;/span&gt;  &lt;span class="o"&gt;=&lt;/span&gt; local_pass
        upsmon master
&lt;span class="o"&gt;[&lt;/span&gt;upsmon_remote&lt;span class="o"&gt;]&lt;/span&gt;
        &lt;span class="nv"&gt;password&lt;/span&gt;  &lt;span class="o"&gt;=&lt;/span&gt; remote_pass
        upsmon slave
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;then we edit &lt;code&gt;sudo nano /etc/nut/upsmon.conf&lt;/code&gt;  and add the UPS to be monitored and user
credentials for &lt;strong&gt;upsd&lt;/strong&gt; in the MONITOR section (CTRL+W to use the FIND
in Nano) as:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;MONITOR friendly_name@localhost &lt;span class="m"&gt;1&lt;/span&gt; upsmon_local local_pass master
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;and finally edit &lt;code&gt;sudo nano /etc/nut/nut.conf&lt;/code&gt;  and set the value for MODE equal to
'netserver' without any spaces before and after the = sign:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# IMPORTANT NOTE:&lt;/span&gt;
&lt;span class="c1"&gt;#  This file is intended to be sourced by shell scripts.&lt;/span&gt;
&lt;span class="c1"&gt;#  You MUST NOT use spaces around the equal sign!&lt;/span&gt;

&lt;span class="nv"&gt;MODE&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;netserver
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;We are now ready to start the NUT-server and local NUT-client on the
Raspberry Pi:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo systemctl status nut-server.service
sudo systemctl status nut-client.service
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;reboot the Raspberry Pi and confirm that the services has started
automatically:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pi@raspberrypi:~ $ ps -ef &lt;span class="p"&gt;|&lt;/span&gt; grep ups
nut        &lt;span class="m"&gt;522&lt;/span&gt;     &lt;span class="m"&gt;1&lt;/span&gt;  &lt;span class="m"&gt;0&lt;/span&gt; 17:31 ?        00:00:34 /lib/nut/usbhid-ups -a eaton
nut        &lt;span class="m"&gt;524&lt;/span&gt;     &lt;span class="m"&gt;1&lt;/span&gt;  &lt;span class="m"&gt;0&lt;/span&gt; 17:31 ?        00:00:00 /lib/nut/upsd
root       &lt;span class="m"&gt;526&lt;/span&gt;     &lt;span class="m"&gt;1&lt;/span&gt;  &lt;span class="m"&gt;0&lt;/span&gt; 17:31 ?        00:00:00 /lib/nut/upsmon
nut        &lt;span class="m"&gt;527&lt;/span&gt;   &lt;span class="m"&gt;526&lt;/span&gt;  &lt;span class="m"&gt;0&lt;/span&gt; 17:31 ?        00:00:00 /lib/nut/upsmon
pi         &lt;span class="m"&gt;688&lt;/span&gt;   &lt;span class="m"&gt;574&lt;/span&gt;  &lt;span class="m"&gt;0&lt;/span&gt; 18:52 pts/1    00:00:00 grep --color&lt;span class="o"&gt;=&lt;/span&gt;auto ups
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;and upsc &lt;em&gt;friendly_name&lt;/em&gt; should return values from the UPS:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pi@raspberrypi:~ $ upsc eaton
Init SSL without certificate database
battery.charge: 100
battery.runtime: 3953
battery.type: PbAc
device.mfr: EATON
device.model: 5E 1100i
device.type: ups
driver.name: usbhid-ups
driver.parameter.pollfreq: 30
driver.parameter.pollinterval: 2
driver.parameter.port: auto
driver.version: 2.7.2
driver.version.data: MGE HID 1.33
driver.version.internal: 0.38
input.voltage: 231.0
outlet.1.status: on
outlet.desc: Main Outlet
outlet.id: 1
outlet.switchable: no
output.frequency: 49.9
output.frequency.nominal: 50
output.voltage: 232.0
output.voltage.nominal: 230
ups.beeper.status: enabled
ups.delay.shutdown: 20
ups.firmware: 01.04.0018
ups.load: 5
ups.mfr: EATON
ups.model: 5E 1100i
ups.power.nominal: 1100
ups.productid: ffff
ups.start.battery: yes
ups.status: OL CHRG
ups.timer.shutdown: -1
ups.vendorid: 0463
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now you can continue adding NUT-clients on your network, and on the
clients set nut.conf MODE=netclient and upsmon.conf to:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;MONITOR friendly_name@x.x.x.x &lt;span class="m"&gt;1&lt;/span&gt; upsmon_remote remote_pass slave
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Congratulations, your NUT server is now officially running!&lt;/p&gt;</content><category term="headless"></category><category term="Linux"></category><category term="RaspberryPi"></category><category term="Raspbian"></category></entry><entry><title>Install Oracle VirtualBox 5.0 On A Headless Ubuntu Server</title><link href="/install-oracle-virtualbox-5-0-on-a-headless-ubuntu-server.html" rel="alternate"></link><published>2016-01-10T21:46:00+02:00</published><updated>2016-01-10T21:46:00+02:00</updated><author><name>Wynand Booysen</name></author><id>tag:None,2016-01-10:/install-oracle-virtualbox-5-0-on-a-headless-ubuntu-server.html</id><summary type="html">&lt;p&gt;Today I'll be showing you how to install VirtualBox 5.0 on a headless
Ubuntu Server along with phpVirtualBox 5 to allow remote management
using a Web GUI.&lt;/p&gt;
&lt;p&gt;Why use VirtualBox?&lt;/p&gt;
&lt;p&gt;Simple.  It's free. It's a Type 2 hypervisor that basically runs on most
hardware, unlike most Type 1 hypervisors …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Today I'll be showing you how to install VirtualBox 5.0 on a headless
Ubuntu Server along with phpVirtualBox 5 to allow remote management
using a Web GUI.&lt;/p&gt;
&lt;p&gt;Why use VirtualBox?&lt;/p&gt;
&lt;p&gt;Simple.  It's free. It's a Type 2 hypervisor that basically runs on most
hardware, unlike most Type 1 hypervisors that are limited to certain
supported hardware.&lt;/p&gt;
&lt;p&gt;VirtualBox is cross platform and runs on Mac/Linux/Windows, which means
you can use your existing machine - no dedicated server required.  But
in this instance I'll be using a spare HP MicroServer that I have laying
around.&lt;/p&gt;
&lt;h2&gt;&lt;strong&gt;Preparing The Server&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;We start off with a basic Ubuntu Server installation - I'm using 14.04.3
LTS.&lt;/p&gt;
&lt;p&gt;Ensure that it's updated by executing:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo apt-get update &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; sudo apt-get upgrade -y
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Install the required prerequisites for VirtualBox to install
successfully:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo apt-get install build-essential dkms -y
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;&lt;strong&gt;Installing Oracle VirtualBox&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;Append the Oracle VirtualBox repository to &lt;strong&gt;/etc/apt/sources.list&lt;/strong&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;deb http://download.virtualbox.org/virtualbox/debian trusty contrib
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;And add the VirtualBox repository's public key to your system:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;wget -q http://download.virtualbox.org/virtualbox/debian/oracle_vbox.asc -O- &lt;span class="p"&gt;|&lt;/span&gt; sudo apt-key add -
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Run an update to pull in the repository:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo apt-get update
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Then install VirtualBox 5.0:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo apt-get install virtualbox-5.0 -y
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;During the VirtualBox installation the '&lt;strong&gt;vboxusers&lt;/strong&gt;' group is
created.  Add your user account to this group, which allow your user to
access USB devices from VirtualBox guests.  In this instance my user is
called '&lt;strong&gt;vlab&lt;/strong&gt;':&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo usermod -aG vboxusers vlab
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Check if VirtualBox's module are loaded by running:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo /etc/init.d/vboxdrv status
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Else run:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo /etc/init.d/vboxdrv setup
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;&lt;strong&gt;Installing VirtualBox Extension Pack&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;The VirtualBox Extension Pack enables additional support for USB 2.0 and
USB 3.0 devices, VirtualBox RDP and PXE boot for Intel cards.  Download
the extension package compatible with your version from
&lt;strong&gt;http://download.virtualbox.org/virtualbox/&lt;/strong&gt; :&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;wget http://download.virtualbox.org/virtualbox/5.0.12/Oracle_VM_VirtualBox_Extension_Pack-5.0.12-104815.vbox-extpack
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Install the pack using VBoxManage:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo VBoxManage extpack install Oracle_VM_VirtualBox_Extension_Pack-5.0.12-104815.vbox-extpack
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;&lt;strong&gt;Installing phpVirtualBox&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;phpVirtualBox is an open source PHP based AJAX web interface for
VirtualBox that mimics the desktop GUI allowing you to administrate it
via a web browser - links are on the
&lt;a href="https://www.virtualbox.org/"&gt;virtualbox.org&lt;/a&gt; site under 'Hot Picks' or
you can go directly to
&lt;a href="http://sourceforge.net/projects/phpvirtualbox/"&gt;phpVirtualBox's&lt;/a&gt; page.&lt;/p&gt;
&lt;p&gt;To install it we need to download some prerequisites again, mainly
Apache, PHP and unzip:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo apt-get install apache2 php5 php5-mysql libapache2-mod-php5 php-soap unzip
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Then we download the latest phpVirtualBox version from the official
site:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;wget http://sourceforge.net/projects/phpvirtualbox/files/phpvirtualbox-5.0-5.zip
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Unzip the files:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;unzip phpvirtualbox-5.0-5.zip
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Move the extracted files to Apache's root folder structure under
phpVirtualBox which will make it available via the browser under
http://&amp;lt;YOUR_IP_ADDRESS&amp;gt;/phpvirtualbox :&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo mv phpvirtualbox-5.0-5 /var/www/html/phpvirtualbox
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;And grant full access to the folder:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo chmod &lt;span class="m"&gt;777&lt;/span&gt; /var/www/html/phpvirtualbox
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;&lt;strong&gt;Configuring phpVirtualBox&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;Configure a config file by copying the existing config.php-example:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo cp /var/www/html/phpvirtualbox/config.php-example /var/www/html/phpvirtualbox/config.php
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Then edit the '&lt;strong&gt;config.php&lt;/strong&gt;' file:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo nano /var/www/html/phpvirtualbox/config.php
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;and change the username/password to that of the user that will be
running VirtualBox (the user added to the '&lt;strong&gt;vboxusers&lt;/strong&gt;' group earlier)
- in my exmple it will be vlab/vlab and save the changes:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;...&lt;span class="o"&gt;]&lt;/span&gt;
var &lt;span class="nv"&gt;$username&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;vlab&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
var &lt;span class="nv"&gt;$password&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;vlab&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;...&lt;span class="o"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;In order for vboxweb-service start vboxwebsrv, the file
/etc/default/virtualbox must exist, create the file:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo nano /etc/default/virtualbox
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;and specify the setting for the user vboxweb will use (again I'm using
my account - &lt;strong&gt;vlab&lt;/strong&gt;):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nv"&gt;VBOXWEB_USER&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;vlab
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;And then start the service:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo /etc/init.d/vboxweb-service start
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;Accessing phpVirtualBox&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;You should now be able to browse over to
http://&amp;lt;YOUR_IP_ADDRESS&amp;gt;/phpvirtualbox and get the login prompt:&lt;/p&gt;
&lt;p&gt;The default credentials are just &lt;strong&gt;admin/admin&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;From here you can manage your VM's exactly like you would with the
desktop application.&lt;/p&gt;
&lt;h2&gt;&lt;strong&gt;Troubleshooting&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;If your console button appears to be grayed out confirm that the
extension pack was installed successfully using:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;vboxmanage list extpacks
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;which should return '&lt;strong&gt;Extension Packs:  1&lt;/strong&gt;' :&lt;/p&gt;
&lt;p&gt;Also check if Remote Desktop is enabled on the Virtual Machine by clicking on
it, then selecting &lt;strong&gt;Settings&lt;/strong&gt; -&amp;gt; &lt;strong&gt;Remote Display&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Your &lt;strong&gt;Console&lt;/strong&gt; button should no be working&lt;/p&gt;</content><category term="headless"></category><category term="ubuntu"></category><category term="virtualbox"></category></entry><entry><title>Windows 10: Installing software using PackageManagement (OneGet)</title><link href="/windows-10-installing-software-using-packagemanagement-oneget.html" rel="alternate"></link><published>2015-12-22T04:00:00+02:00</published><updated>2015-12-22T04:00:00+02:00</updated><author><name>Wynand Booysen</name></author><id>tag:None,2015-12-22:/windows-10-installing-software-using-packagemanagement-oneget.html</id><summary type="html">&lt;p&gt;The best feature to be included with Windows 10 has to be the
command-line based installer, at least for those of us in a SysAdmin
and/or DevOps role.&lt;/p&gt;
&lt;p&gt;For those of you that have worked on Linux before and have used Yum and
Apt-Get, this is Microsoft's attempt to …&lt;/p&gt;</summary><content type="html">&lt;p&gt;The best feature to be included with Windows 10 has to be the
command-line based installer, at least for those of us in a SysAdmin
and/or DevOps role.&lt;/p&gt;
&lt;p&gt;For those of you that have worked on Linux before and have used Yum and
Apt-Get, this is Microsoft's attempt to provide a similar experience for
the Windows platform.&lt;/p&gt;
&lt;p&gt;It's been over a year since this was introduced in the Preview versions
of Windows 10 so its still fairly new.  I found it wasn't as easy to get
it going as a lot of articles and tutorials still reference the OneGet
commands and since its been renamed to PackageManagement there has been
some minor changes.&lt;/p&gt;
&lt;p&gt;To use PackageManagement (OneGet) on Windows 10 make sure you set the
PowerShell execution policy to 'RemoteSigned' otherwise it will fail
silently
(&lt;a href="https://github.com/OneGet/oneget/issues/97#issuecomment-139331418"&gt;bug&lt;/a&gt;)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;Set-ExecutionPolicy&lt;/span&gt; &lt;span class="n"&gt;RemoteSigned&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Add the Chocolatey plugin and repository using this one-liner to get
access to 3rd party applications from the Chocolatey repository, the&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;-Force&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;flag performs a bootstrap that takes care of both:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;Get-PackageProvider&lt;/span&gt; &lt;span class="n"&gt;Chocolatey&lt;/span&gt; &lt;span class="n"&gt;-Force&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="nb"&gt;Out-Null&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;That's it, we are ready to install some applications, using the &lt;code&gt;-Force&lt;/code&gt; flag is similar
to &lt;code&gt;-y&lt;/code&gt;  used with
Yum and Apt-Get which assumes Yes when prompted:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;VLC Media Player:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;Install-Package&lt;/span&gt; &lt;span class="n"&gt;vlc&lt;/span&gt; &lt;span class="n"&gt;-Force&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="nb"&gt;Out-Null&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;Skype:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;Install-Package&lt;/span&gt; &lt;span class="n"&gt;skype&lt;/span&gt; &lt;span class="n"&gt;-Force&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="nb"&gt;Out-Null&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;7zip:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;Install-Package&lt;/span&gt; &lt;span class="n"&gt;7zip&lt;/span&gt; &lt;span class="n"&gt;-Force&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="nb"&gt;Out-Null&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;Atom:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;Install-Package&lt;/span&gt; &lt;span class="n"&gt;atom&lt;/span&gt; &lt;span class="n"&gt;-Force&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="nb"&gt;Out-Null&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Or you can search for your favorite applications using this command:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;Find-Package&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;application&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;-Force&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;There isn't a lot of applications available and some of those in the
Chocolatey repository simply do not work.&lt;/p&gt;
&lt;p&gt;Hopefully we will see software companies (like Adobe, VMWare and Oracle
) providing official repositories going forward, to ease the deployment
and provisioning of systems in the future using the command-line.&lt;/p&gt;</content></entry><entry><title>Hosting Multiple WordPress Sites On Your VPS</title><link href="/hosting-multiple-wordpress-sites-on-your-vps.html" rel="alternate"></link><published>2015-12-07T20:00:00+02:00</published><updated>2015-12-07T20:00:00+02:00</updated><author><name>Wynand Booysen</name></author><id>tag:None,2015-12-07:/hosting-multiple-wordpress-sites-on-your-vps.html</id><summary type="html">&lt;p&gt;The cost of running multiple WordPress sites on shared hosting
eventually starts adding up, or you might just want to move to a VPS
(Virtual Private Server) to have dedicated resources and a more
responsive site.&lt;/p&gt;
&lt;p&gt;The truth is you can easily get a cheap VPS for the same price …&lt;/p&gt;</summary><content type="html">&lt;p&gt;The cost of running multiple WordPress sites on shared hosting
eventually starts adding up, or you might just want to move to a VPS
(Virtual Private Server) to have dedicated resources and a more
responsive site.&lt;/p&gt;
&lt;p&gt;The truth is you can easily get a cheap VPS for the same price as a
WordPress site running on a shared host.&lt;/p&gt;
&lt;p&gt;So what's the difference between shared hosting and a VPS?  Shared
hosting as the name implies means your resources, mainly CPU and RAM are
shared amongst several sites - which is why sites will be less
responsive. A VPS has an assigned or guaranteed amount of CPU and RAM
allocated to your VPS.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.digitalocean.com/?refcode=ae32c4293b17"&gt;DigitalOcean&lt;/a&gt;
offers a one-click installer for WordPress VPS for only $10 a month to
run a single site - expensive but easy to get started and the site will
be capable of handling a lot of visitors.  You can however run WordPress
on the $5 a month VPS provided that you setup the server and install
WordPress yourself.&lt;/p&gt;
&lt;p&gt;Setting up a server from scratch is an interesting learning opportunity
and can be loads of fun, but can also be a time consuming process.&lt;/p&gt;
&lt;p&gt;If you want to quickly get up and running on a VPS the easiest solution
is to use the ServerPilot control panel from
&lt;a href="https://www.serverpilot.io/?refcode=27e9d31b3beb"&gt;ServerPilot.io&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ServerPilot's control panel allows you to connect to and manage your
VPS, which at the time of writing has to be a freshly installed Ubuntu
14.04 server.  The agent that gets pushed to the server will install and
configure NGINX, Apache, PHP and MySQL and allow you to deploy '&lt;em&gt;apps&lt;/em&gt;'
which can be WordPress sites or other PHP sites from the GUI.&lt;/p&gt;
&lt;p&gt;Creating a WordPress site is as easy as filling out a form with the
'&lt;em&gt;app&lt;/em&gt;' name, domain name, checking the PHP version and WordPress tick
boxes and selecting the server after which you'll be prompted to set
your WordPress site admin name and password just like any other hosted
WordPress site.&lt;/p&gt;
&lt;p&gt;You can manage multiple servers and apps on ServerPilot's free account
without any restrictions.  The paid options add extras like server
monitoring for a monthly fee.&lt;/p&gt;
&lt;p&gt;Make use of this link when signing up for &lt;a href="https://www.digitalocean.com/?refcode=ae32c4293b17"&gt;Digital Ocean and you'll
receive $10 credit that will allow you to run their $5
instance&lt;/a&gt;, &lt;strong&gt;FREE&lt;/strong&gt;
for two months for you to try out their services.  Also use this link
to &lt;a href="https://www.serverpilot.io/?refcode=27e9d31b3beb"&gt;ServerPilot&lt;/a&gt; to get
started on the &lt;strong&gt;FREE &lt;/strong&gt;tier.&lt;/p&gt;
&lt;p&gt;Happy hosting!&lt;/p&gt;</content><category term="vps"></category><category term="ubuntu"></category><category term="wordpress"></category></entry></feed>