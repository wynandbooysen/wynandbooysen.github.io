<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Wynand Booysen - Mikrotik</title><link href="/" rel="alternate"></link><link href="/feeds/mikrotik.atom.xml" rel="self"></link><id>/</id><updated>2017-01-07T10:57:00+02:00</updated><entry><title>Using Ansible To Manage Mikrotik Devices</title><link href="/using-ansible-to-manage-mikrotik-devices.html" rel="alternate"></link><published>2017-01-07T10:57:00+02:00</published><updated>2017-01-07T10:57:00+02:00</updated><author><name>Wynand Booysen</name></author><id>tag:None,2017-01-07:/using-ansible-to-manage-mikrotik-devices.html</id><summary type="html">&lt;p&gt;Using Ansible To Manage Mikrotik Devices&lt;/p&gt;</summary><content type="html">&lt;p&gt;Mikrotik devices are very capable devices with lots of features for a reasonable price - the problem? Managing several devices and keeping your base configurations up-to-date and consistent.&lt;/p&gt;
&lt;p&gt;Mikrotik devices have an application programming interface (API) that can be used for management, but you'll need to roll your own solution.  But they can also be accessed and managed via SSH.&lt;/p&gt;
&lt;p&gt;Mikrotik does also provide software named The Dude which does network monitoring as well as some remote management, but in order to establish and maintain an consistent base line one really needs a configuration management tool.&lt;/p&gt;
&lt;p&gt;So in order to use a configuration tool for Mikrotik devices, it has to be agentless and able to manage them over SSH - and easy to use.&lt;/p&gt;
&lt;p&gt;So I picked Ansible since it met the criteria the best.  You need a server that can SSH into your Mikrotik devices which serves as the control server, and Ansible Playbooks which contain the tasks to be performed against the managed nodes and a list of hosts that need to be managed.  The Playbooks are written in YAML.  It works, but it's not perfect and here is why.&lt;/p&gt;
&lt;p&gt;Mikrotik's RouterOS iss based on the Linux kernel, but it is a minimal purpose built OS.  It doesn't have Python installed - which is what Ansible uses to manage the nodes.  It does check for Python on the node after connecting by default, but you have the option to override this in your Playbook and execute RAW commands directly against the node&lt;/p&gt;
&lt;p&gt;It doesn't properly support pseudo terminals (PTY) which means the connection stays open/active and Ansible will appear to be hanging.&lt;/p&gt;
&lt;p&gt;In previous versions of Ansible a PTY was only used when the command needed to be executed as root. An if statement prevented the code from always using it. Since Ansible v2+ a PTY is always used unless specifically disabled in the ansible.cfg by uncommenting a line.  This however is only disables it for Paramiko connections, which is a little bit slower, but not OpenSSH connections.  Paramiko also throws 'No handlers could be found for logger 'paramiko.transport'' when it encounters an error due to logging not being configured, but you can just use -vvvv when executing the Playbook to debug the errors.&lt;/p&gt;
&lt;p&gt;These few quirks aside, Ansible does make it fairly easy to manage Mikrotik devices.&lt;/p&gt;</content><category term="script"></category><category term="router"></category><category term="firewall"></category><category term="ansible"></category></entry><entry><title>Mikrotik Inside VirtualBox</title><link href="/mikrotik-inside-virtualbox.html" rel="alternate"></link><published>2016-08-20T11:00:00+02:00</published><updated>2016-08-20T11:00:00+02:00</updated><author><name>Wynand Booysen</name></author><id>tag:None,2016-08-20:/mikrotik-inside-virtualbox.html</id><summary type="html">&lt;p&gt;Mikrotik Inside VirtualBox&lt;/p&gt;</summary><content type="html">&lt;p&gt;We'll have a look at setting up a virtual Mikrotik using VirtualBox.  This handy for testing scripts/configurations as well as testing backups from prodcution devices - by restoring them onto the virtual Mikrotik.&lt;/p&gt;
&lt;p&gt;Head on over to &lt;a href="http://www.mikrotik.com/download"&gt;http://www.mikrotik.com/download&lt;/a&gt; and download the VDI image.&lt;/p&gt;
&lt;p&gt;After downloading the file simply copy and paste it into the same directory, which depending on the host OS will append the word copy to it in one fashion or another.  The reason for this is that we will use the 'copy' as the hard drive of the virtual Mikrotik allowing for a simple delete and replace with yet another copy whenever we need to do a hard 'reset' on the device.&lt;/p&gt;
&lt;p&gt;Then on VirtualBox, create a new virtual machine.  For the sake of simplicity I'll name mine Mikrotik.&lt;/p&gt;
&lt;p&gt;Select Type as Linux and for Version Other Linux (64bit) and click Continue.&lt;/p&gt;
&lt;p&gt;For RAM I drop it to 128MB which is still somewhat excessive and click Continue.&lt;/p&gt;
&lt;p&gt;Now select 'Do not add a virtual hard disk' - we will add the 'copy' of the downloaded VDI after creating the virtual machine.  Click on Create&lt;/p&gt;
&lt;p&gt;Ignore the prompt about the machine not having a hard drive.  Once created manually add the exisitng hard drive and change the network adapter to bridged mode so that it will receive an IP on your network and allow you to connect using WinBox/SSH/WebFig.&lt;/p&gt;
&lt;p&gt;It should take a few seconds for the virtual Mikrotik to boot, afterwhich you can log into the Mikrotik using the default admin user with no password.&lt;/p&gt;
&lt;p&gt;Issue the command &lt;code&gt;/ip address print&lt;/code&gt; to get the IP of the virtual Mikrotik.&lt;/p&gt;
&lt;p&gt;Now you can log into the virtual Mikrotik just like any other Mikrotik device.&lt;/p&gt;</content><category term="router"></category><category term="firewall"></category></entry><entry><title>Mikrotik WinBox for MacOS</title><link href="/mikrotik-winbox-for-macos.html" rel="alternate"></link><published>2016-08-08T08:37:00+02:00</published><updated>2016-08-08T08:37:00+02:00</updated><author><name>Wynand Booysen</name></author><id>tag:None,2016-08-08:/mikrotik-winbox-for-macos.html</id><summary type="html">&lt;p&gt;Mikrotik WinBox for MacOS&lt;/p&gt;</summary><content type="html">&lt;p&gt;Mikrotik's WinBox is a native Windows application used to manage and configure Mikrotik devices.&lt;/p&gt;
&lt;p&gt;It is possible to run this under Wine on other operating systems.  Luckily for us Joshaven Potter builds a MacOS version with embedded Wine which you can download from his site &lt;a href="http://joshaven.com/resources/tools/winbox-for-mac/"&gt;http://joshaven.com/resources/tools/winbox-for-mac/&lt;/a&gt; and just drop into your applications directory and start using it immediately.&lt;/p&gt;
&lt;p&gt;He also provides a MacOS version of Mikrotik's The Dude as well.&lt;/p&gt;</content><category term="macos"></category><category term="winbox"></category><category term="firewall"></category><category term="router"></category></entry><entry><title>Mikrotik Configuration Snippets</title><link href="/mikrotik-configuration-snippets.html" rel="alternate"></link><published>2016-07-31T09:05:00+02:00</published><updated>2016-07-31T09:05:00+02:00</updated><author><name>Wynand Booysen</name></author><id>tag:None,2016-07-31:/mikrotik-configuration-snippets.html</id><summary type="html">&lt;p&gt;Mikrotik Configuration Snippets&lt;/p&gt;</summary><content type="html">&lt;p&gt;This post will contain snippets for various Mikrotik configuration options.&lt;/p&gt;
&lt;p&gt;Set ether1 to DHCP client
[gist:id=0eee4afa95897a70e5b63d3ee3f5515e]&lt;/p&gt;</content><category term="script"></category><category term="router"></category><category term="firewall"></category></entry></feed>